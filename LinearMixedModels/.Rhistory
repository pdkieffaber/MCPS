align_to_reference <- function(seq, ref) {
tryCatch({
alignment <- dtw(seq, ref, keep.internals = TRUE)
# Interpolate the sequence to match the length of the reference sequence
aligned_seq <- approx(seq, xout = alignment$index2, method = "linear")$y
return(aligned_seq)
}, error = function(e) {
cat("Error in DTW alignment:", e$message, "\n")
return(rep(NA, length(ref))) # Return a sequence of NA if alignment fails
})
}
# Initialize the average sequence with the first sequence (interpolated to a common length)
initial_length <- max(sapply(sequences, length))  # Use the length of the longest sequence
interpolated_sequences <- lapply(sequences, function(seq) {
approx(seq, n = initial_length)$y
})
# Initialize the average sequence
average_sequence <- rowMeans(do.call(rbind, interpolated_sequences), na.rm = TRUE)
max_iter <- 10
tolerance <- 1e-6
# Iterative process to update the average sequence
for (iter in 1:max_iter) {
# Align all sequences to the current average sequence
aligned_sequences <- lapply(interpolated_sequences, function(seq) {
align_to_reference(seq, average_sequence)
})
# Handle case where DTW alignment fails
if (any(sapply(aligned_sequences, function(x) all(is.na(x))))) {
cat("DTW alignment failed for one or more sequences.\n")
break
}
# Combine aligned sequences into a matrix
aligned_matrix <- do.call(rbind, aligned_sequences)
# Compute new average sequence
new_average_sequence <- colMeans(aligned_matrix, na.rm = TRUE)
# Check convergence
if (sum((new_average_sequence - average_sequence)^2, na.rm = TRUE) < tolerance) {
break
}
# Update the average sequence
average_sequence <- new_average_sequence
}
# Print the final average sequence
print(average_sequence)
# Perform k-means clustering
set.seed(123) # for reproducibility
clusters <- kmeans(na.omit(as.vector(as.matrix(Freqdata[,2:51]))), centers = 2)
# Perform k-means clustering
set.seed(123) # for reproducibility
clusters <- kmeans(as.dist(dtw_distances), centers = 2)
# Determine threshold as the midpoint between cluster centroids
threshold <- mean(clusters$centers)
# Extract cluster assignments
cluster_assignments <- clusters$cluster
# Plotting the power spectrum with clusters
plot(frequencies, power_values, type = "n", main = "EEG Power Spectrum with Clusters", xlab = "Frequency (Hz)", ylab = "Power")
# Perform k-means clustering
set.seed(123) # for reproducibility
clusters <- kmeans(as.dist(dtw_distances), centers = 2)
# Determine threshold as the midpoint between cluster centroids
threshold <- mean(clusters$centers)
# Extract cluster assignments
cluster_assignments <- clusters$cluster
# Define colors for each cluster
cluster_colors <- c("red", "blue", "green", "purple", "orange")  # Add more colors if you have more clusters
# Plot each cluster with different colors
for (i in 1:num_clusters) {
points(frequencies[cluster_assignments == i], power_values[cluster_assignments == i], col = cluster_colors[i], pch = 19)
}
# Perform k-means clustering
set.seed(123) # for reproducibility
num_clusters=2
clusters <- kmeans(as.dist(dtw_distances), centers = num_clusters)
# Determine threshold as the midpoint between cluster centroids
threshold <- mean(clusters$centers)
# Extract cluster assignments
cluster_assignments <- clusters$cluster
# Define colors for each cluster
cluster_colors <- c("red", "blue", "green", "purple", "orange")  # Add more colors if you have more clusters
# Plot each cluster with different colors
for (i in 1:num_clusters) {
points(frequencies[cluster_assignments == i], power_values[cluster_assignments == i], col = cluster_colors[i], pch = 19)
}
peask_df
peaks_df
# Perform k-means clustering
set.seed(123) # for reproducibility
num_clusters=2
clusters <- kmeans(as.dist(dtw_distances), centers = num_clusters)
# Determine threshold as the midpoint between cluster centroids
threshold <- mean(clusters$centers)
# Extract cluster assignments
cluster_assignments <- clusters$cluster
# Define colors for each cluster
cluster_colors <- c("red", "blue", "green", "purple", "orange")  # Add more colors if you have more clusters
# Plot each cluster with different colors
for (i in 1:num_clusters) {
points(peaks_df$PID[cluster_assignments == i], peaks_df$PID[cluster_assignments == i], col = cluster_colors[i], pch = 19)
}
# Perform k-means clustering
set.seed(123) # for reproducibility
num_clusters=2
clusters <- kmeans(as.dist(dtw_distances), centers = num_clusters)
# Determine threshold as the midpoint between cluster centroids
threshold <- mean(clusters$centers)
# Extract cluster assignments
cluster_assignments <- clusters$cluster
# Define colors for each cluster
cluster_colors <- c("red", "blue", "green", "purple", "orange")  # Add more colors if you have more clusters
# Plot each cluster with different colors
#for (i in 1:num_clusters) {
#  points(peaks_df$PID[cluster_assignments == i], peaks_df$PID[cluster_assignments == i], col = cluster_colors[i], pch = 19)
#}
# Optionally, add a legend
#legend("topright", legend = paste("Cluster", 1:num_clusters), col = cluster_colors[1:num_clusters], pch = 19)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
# create a dataset
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Plot
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Load CSV file into R
Profiledata <- read.csv("ResonanceProfileCI99_9.11.24.csv")
library(dtw)
library(poLCA)
library(reshape2)
library(pracma)
library(ggplot2)
library(Matrix)
library(dplyr)
# Reset the graphics device
#dev.off()
# Set layout
layout(matrix(1, 1, 1))
# Adjust margins
par(mar = c(5, 4, 4, 2) + 0.1)
# Print the results
#Profiledata <- Profiledata[!Profiledata$PID %in% c(4001,3067), ]
## Function to find peaks
#find_subject_peaks <- function(subject_data) {
#  subject_data[is.nan(subject_data)]<--0
#  peaks <- findpeaks(as.numeric(subject_data), minpeakheight = .15) # You can set minpeakheight as needed
#  return(peaks[, 2]) # Return the locations of the peaks
#}
# Apply the function to each subject
#peaks_list <- apply(Freqdata[, -1], 1, find_subject_peaks)
# Combine the results into a data frame
#peaks_df <- data.frame(
#  Subject = Freqdata$Subject,
#  Peaks = I(peaks_list) # Use I() to keep the list structure
#)
# Function to remove zeros
find_subject_peaks <- function(subject_data) {
subject_data[is.nan(subject_data)]<--0
peaks <- as.numeric(subject_data[subject_data>0]) # Y
#print(peaks)
return(peaks)
}
# Apply the function to each subject
freqcols=c("P1","P2","P3","P4","P5","P6","P7","P8","P9","P10","P11","P12","P13","P14","P15")
peaks_list <- apply(Profiledata[, freqcols], 1, find_subject_peaks)
ampcols=c("A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","A11","A12","A13","A14","A15")
amp_list <- apply(Profiledata[, ampcols], 1, find_subject_peaks)
# Combine the results into a data frame
peaks_df <- data.frame(
PID = Profiledata$PID,
Peaks = I(peaks_list), # Use I() to keep the list structure
Amps=I(amp_list)
)
FreqVec=unlist(peaks_list, use.names=FALSE)
col=c("red",	"red",	"red",	"green",	"green",	"green",	"green",	"blue",	"blue",	"blue",	"blue",	"blue",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"yellow",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple",	"purple")
hist(FreqVec[FreqVec>0],breaks=seq(0,50,1), col=col, xlim=c(0,50), main="Histogram of Resonant Frequencies",xlab="Frequency (Hz)")
#legend("topright", c("Delta", "Theta","Alpha","Beta","Gamma"), fill=c("red", "green","blue","yellow","purple"))
FreqAmpdata=data.frame(Amps=AmpVec, Freqs=FreqVec)
# Define a custom function to categorize age
freq_band <- function(freq) {
if (freq <= 3) {
return("Delta")
} else if (freq <= 7) {
return("Theta")
} else if (freq <= 12) {
return("Alpha")
} else if (freq <=25) {
return("Beta")
} else {
return("Gamma")
}
}
# Add a new variable 'age_category' using the custom function
FreqAmpdata <- FreqAmpdata %>%
mutate(FreqBand = sapply(Freqs, freq_band))
# Reorder levels
FreqAmpdata$FreqBand <- factor(FreqAmpdata$FreqBand, levels = c("Delta", "Theta", "Alpha","Beta", "Gamma"))
# Display the updated data frame
#print(FreqAmpdata)
p=ggplot(FreqAmpdata, aes(x=Amps, fill=FreqBand)) +
geom_histogram(color="black")
# Use custom color palettes
p+scale_color_manual(values=c("black"))+
scale_fill_manual(values=c("red", "green", "blue","yellow","purple"))+
theme_classic()+
theme(axis.text=element_text(size=20),
axis.title=element_text(size=25,face="bold"))
means <- aggregate(Freqs ~  FreqBand, FreqAmpdata, FUN = function(x) round(mean(x), 0))
p=ggplot(FreqAmpdata, aes(x=reorder(FreqBand,Freqs, na.rm=TRUE),y=Freqs, fill=FreqBand)) +
geom_boxplot(color="black")
#stat_summary(fun=mean, colour="darkred", geom="point",
#             shape=18, size=3, show.legend=FALSE) +
p+theme_classic()+
scale_fill_manual(values=c("red", "green", "blue","yellow","purple"))+
geom_text(data = means, aes(label = Freqs, y = Freqs + 3.08), size=5)+
theme(axis.text=element_text(size=20),
axis.title=element_text(size=25,face="bold"),
legend.title=element_text(size=0),
legend.text=element_text(size=20))+
xlab("Frequency Band")+
ylab("Frequency (Hz)")
p<-ggplot(FreqAmpdata,aes(Freqs,Freqs, size=Amps, color=FreqBand)) +
geom_point(shape=16, alpha=.5) +
theme_minimal()
p
#Get number of subjects
n_subjects = dim(peaks_df)[1]
# Initialize a distance matrix
dtw_distances <- matrix(0, nrow = n_subjects, ncol = n_subjects)
# Compute DTW distances
for (i in 1:(n_subjects-1)) {
for (j in (i+1):n_subjects) {
#print(c(length(peaks_df$Amps[[i]]),length(peaks_df$Peaks[[i]])))
#print(c(length(peaks_df$Amps[[j]]),length(peaks_df$Peaks[[j]])))
alignment <- dtw(peaks_df$Peaks[[i]][peaks_df$Peaks[[i]]<99], peaks_df$Peaks[[j]][peaks_df$Peaks[[j]]<99])
dtw_distances[i, j] <- alignment$distance
dtw_distances[j, i] <- alignment$distance
}
}
# Load necessary libraries
#install.packages("pheatmap")
library(pheatmap)
# Create heatmap
pheatmap(dtw_distances, cluster_rows = FALSE, cluster_cols = FALSE,
display_numbers = TRUE, main = "Dissimilarity Matrix Heatmap")
meanDTW=rowMeans(dtw_distances)
mean_row_means <- mean(meanDTW)
sd_row_means <- sd(meanDTW)
# Step 3: Compute Z-scores for each row mean
z_scores <- (meanDTW - mean_row_means) / sd_row_means
hist(z_scores,30)
# Perform hierarchical clustering
hc <- hclust(as.dist(dtw_distances), method = "complete")
# Cut dendogram
clusters <- cutree(hc, k = 2)
# Plot the dendrogram
plot(hc, main = "Hierarchical Clustering Dendrogram", xlab = "", sub = "", cex = 0.9)
rect.hclust(hc, k = 2, border = "red")  # Highlight clusters
# Perform hierarchical clustering
summary(aov(Profiledata$BAPQ.Aloof~clusters))
library(cluster)
# Perform K-Medoids clustering
pam_result <- pam(as.dist(dtw_distances), k = 2)
# Add cluster assignments to the original dataframe
peaks_df$Cluster <- pam_result$clustering
# View the dataframe with cluster assignments
print(peaks_df)
# Plot clusters
plot(pam_result)
# Determine optimal number of clusters using PAM
wss <- numeric(10)  # Initialize vector to store total within-cluster sum of squares
for (k in 1:10) {
pam_result <- pam(dtw_distances, k = k)
wss[k] <- pam_result$objective  # Store total within-cluster sum of squares
}
# Plot elbow plot to visualize WSS
plot(1:10, wss, type = "b", pch = 19, frame = FALSE, xlab = "Number of clusters (k)", ylab = "Total within-cluster sum of squares (WSS)", main = "Elbow Plot for Optimal k")
# Perform fuzzy clustering with 2 clusters
fuzzy_clustering <- fanny(dtw_distances, k = 2, diss = TRUE, memb.exp=1.2)
silhouette_info <- silhouette(fuzzy_clustering$clustering, dtw_distances)
mean_silhouette <- mean(silhouette_info[, 3])
print(mean_silhouette)
# Extract and save the membership coefficients for each cluster
membership <- fuzzy_clustering$membership
# Extract and save the hard cluster assignments (maximum membership)
cluster_assignments <- max.col(membership)
# Print the results
# Create heatmap
pheatmap(membership, cluster_rows = FALSE, cluster_cols = FALSE,
display_numbers = TRUE, main = "Cluster Membership")
t.test(Profiledata$BAPQ.Total[cluster_assignments==1],Profiledata$BAPQ.Total[cluster_assignments==2])
wilcox.test(Profiledata$BAPQ.Aloof[cluster_assignments==1],Profiledata$BAPQ.Aloof[cluster_assignments==2])
t.test(Profiledata$BAPQ.Pragmatic.Language[cluster_assignments==1],Profiledata$BAPQ.Pragmatic.Language[cluster_assignments==2])
t.test(Profiledata$BAPQ.Rigid[cluster_assignments==1],Profiledata$BAPQ.Rigid[cluster_assignments==2])
cor.test(membership[,1],Profiledata$BAPQ.Aloof)
# Perform k-means clustering
set.seed(123) # for reproducibility
num_clusters=2
clusters <- kmeans(as.dist(dtw_distances), centers = num_clusters)
# Determine threshold as the midpoint between cluster centroids
threshold <- mean(clusters$centers)
# Extract cluster assignments
cluster_assignments <- clusters$cluster
# Define colors for each cluster
cluster_colors <- c("red", "blue", "green", "purple", "orange")  # Add more colors if you have more clusters
# Plot each cluster with different colors
#for (i in 1:num_clusters) {
#  points(peaks_df$PID[cluster_assignments == i], peaks_df$PID[cluster_assignments == i], col = cluster_colors[i], pch = 19)
#}
# Optionally, add a legend
#legend("topright", legend = paste("Cluster", 1:num_clusters), col = cluster_colors[1:num_clusters], pch = 19)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
# create a dataset
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Plot
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
FreqAmpdata=data.frame(Amps=AmpVec, Freqs=FreqVec)
# Define a custom function to categorize age
freq_band <- function(freq) {
if (freq <= 3) {
return("Delta")
} else if (freq <= 7) {
return("Theta")
} else if (freq <= 12) {
return("Alpha")
} else if (freq <=25) {
return("Beta")
} else {
return("Gamma")
}
}
# Add a new variable 'age_category' using the custom function
FreqAmpdata <- FreqAmpdata %>%
mutate(FreqBand = sapply(Freqs, freq_band))
# Reorder levels
FreqAmpdata$FreqBand <- factor(FreqAmpdata$FreqBand, levels = c("Delta", "Theta", "Alpha","Beta", "Gamma"))
# Display the updated data frame
#print(FreqAmpdata)
p=ggplot(FreqAmpdata, aes(x=Amps, fill=FreqBand)) +
geom_histogram(color="black")
# Use custom color palettes
p+scale_color_manual(values=c("black"))+
scale_fill_manual(values=c("red", "green", "blue","yellow","purple"))+
theme_classic()+
theme(axis.text=element_text(size=20),
axis.title=element_text(size=25,face="bold"))
AmpVec=unlist(amp_list, use.names=FALSE)
FreqAmpdata=data.frame(Amps=AmpVec, Freqs=FreqVec)
# Define a custom function to categorize age
freq_band <- function(freq) {
if (freq <= 3) {
return("Delta")
} else if (freq <= 7) {
return("Theta")
} else if (freq <= 12) {
return("Alpha")
} else if (freq <=25) {
return("Beta")
} else {
return("Gamma")
}
}
# Add a new variable 'age_category' using the custom function
FreqAmpdata <- FreqAmpdata %>%
mutate(FreqBand = sapply(Freqs, freq_band))
# Reorder levels
FreqAmpdata$FreqBand <- factor(FreqAmpdata$FreqBand, levels = c("Delta", "Theta", "Alpha","Beta", "Gamma"))
# Display the updated data frame
#print(FreqAmpdata)
p=ggplot(FreqAmpdata, aes(x=Amps, fill=FreqBand)) +
geom_histogram(color="black")
# Use custom color palettes
p+scale_color_manual(values=c("black"))+
scale_fill_manual(values=c("red", "green", "blue","yellow","purple"))+
theme_classic()+
theme(axis.text=element_text(size=20),
axis.title=element_text(size=25,face="bold"))
setwd("~/Documents/Latex/PMRPS/LinearMixedModels")
source("LMMclinical.R")
source("LMMclinical.R")
source("LMMclinical.R")
install.packages("ggplot2")
install.packages("lmerTest")
install.packages("lmerTest")
install.packages("lme4")
source("LMMclinical.R")
source("LMMclinical.R")
source("LMMclinical.R")
summary(data)
head(data)
# Plot anxiety scores over time by therapy type
ggplot(data, aes(x = time, y = anxiety_scores, color = therapy_type)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Anxiety␣Scores␣Over␣Time␣by␣Therapy␣Type",
x = "Time␣(Months)", y = "Anxiety␣Score") +
theme_minimal()
# Plot anxiety scores over time by therapy type
ggplot(data, aes(x = time, y = anxiety_scores, color = therapy_type)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Anxiety Scores Over Time by Therapy Type",
x = "Time (Months)", y = "Anxiety Score") +
theme_minimal()
# Fit the model
model <- lmer(anxiety_scores ~ therapy_type * time +
(1 | therapist_id), data = data)
# Display summary
summary(model)
head(data)
interaction_effect <- ifelse(therapy_type == "CBT", time * -0.8, 0) # Greater improvement for CBT
set.seed(123)
# Set parameters
n_patients <- 10          # Number of patients per therapist
n_therapists <- 5         # Number of therapists
time_points <- c(0, 3, 6) # Baseline, Mid-point, Endpoint
# Total number of observations
n_obs <- n_patients * n_therapists * length(time_points)
# Simulate therapist-level data
therapist_id <- rep(1:n_therapists, each = n_patients * length(time_points) / n_therapists)
therapist_effects <- rep(rnorm(n_therapists, mean = 0, sd = 2), each = n_patients * length(time_points) / n_therapists)
# Simulate patient-level data
therapy_type <- rep(c("CBT", "Mindfulness"), length.out = n_obs)
time <- rep(time_points, times = n_patients * n_therapists)
# Fixed effects: Therapy and time effects
cbt_effect <- ifelse(therapy_type == "CBT", -5, 0)
time_effect <- time * -0.8 # Decreasing anxiety over time
interaction_effect <- ifelse(therapy_type == "CBT", time * -0.8, 0) # Greater improvement for CBT
# Generate anxiety scores
residual_error <- rnorm(n_obs, mean = 0, sd = 5) # Residual error matches n_obs
anxiety_scores <- 50 + cbt_effect + time_effect + interaction_effect + therapist_effects + residual_error
# Create data frame
data <- data.frame(
anxiety_scores = anxiety_scores,
therapy_type = factor(therapy_type),
time = factor(time, levels = time_points),
therapist_id = factor(therapist_id)
)
# Display summary of the data
summary(data)
# Plot anxiety scores over time by therapy type
ggplot(data, aes(x = time, y = anxiety_scores, color = therapy_type)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Anxiety Scores Over Time by Therapy Type",
x = "Time (Months)", y = "Anxiety Score") +
theme_minimal()
# Fit the model
model <- lmer(anxiety_scores ~ therapy_type * time +
(1 | therapist_id), data = data)
# Display summary
summary(model)
confint(model, method="Wald")
confint(model, method="profile")
library(MuMIn)
install.packages("MuMIn")
library("MuMIn")
r.squaredGLMM(model)
library(performance)
install.packages(performance)
install.packages("performance")
library(performance)
r2(model)
.513-.501
# Extract residuals and fitted values
residuals <- resid(model)
fitted_values <- fitted(model)
# Optionally, add a smoothing line to check patterns
library(ggplot2)
ggplot(data = data.frame(fitted = fitted_values, residuals = residuals), aes(x = fitted, y = residuals)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(title = "Residuals vs Fitted Values")
# Autocorrelation plot
acf(residuals)
# For categorical fixed effect (e.g., therapy type)
ggplot(data, aes(x = therapy_type, y = anxiety_scores)) +
geom_boxplot()
ggplot(data, aes(x = therapy_type, y = anxiety_scores)) +
+     geom_boxplot() + geom_point()
ggplot(data, aes(x = therapy_type, y = anxiety_scores)) +
geom_boxplot() +
geom_point()
